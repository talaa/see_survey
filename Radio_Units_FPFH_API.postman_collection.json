{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
		"name": "Radio Units & FPFH API Collection",
		"description": "Complete API testing collection for New Radio Units and FPFH endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "ðŸ”§ New Radio Units API",
			"item": [
				{
					"name": "1. Get Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has session_id\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('session_id');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/new-radio-units/{{session_id}}/config",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"new-radio-units",
								"{{session_id}}",
								"config"
							]
						}
					}
				},
				{
					"name": "2. Get All Radio Units (Empty)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has data array\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/new-radio-units/{{session_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"new-radio-units",
								"{{session_id}}"
							]
						}
					}
				},
				{
					"name": "3. Create Multiple Radio Units",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success message\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.include('updated successfully');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"radio_unit_index\": 1,\n    \"radio_unit_number\": 1,\n    \"new_radio_unit_sector\": \"1\",\n    \"connected_to_antenna\": \"New\",\n    \"connected_antenna_technology\": [\"4G\", \"5G\"],\n    \"new_radio_unit_model\": \"Nokia AEHC\",\n    \"radio_unit_location\": \"Tower leg A\",\n    \"feeder_length_to_antenna\": 15.5,\n    \"tower_leg_section\": \"Angular\",\n    \"angular_l1_dimension\": 100.0,\n    \"angular_l2_dimension\": 100.0,\n    \"side_arm_type\": \"New side arm need to be supplied\",\n    \"side_arm_length\": 2.5,\n    \"side_arm_cross_section\": 50.0,\n    \"side_arm_offset\": 25.0,\n    \"dc_power_source\": \"Direct from rectifier distribution\",\n    \"dc_power_cable_length\": 20.0,\n    \"fiber_cable_length\": 30.0,\n    \"jumper_length\": 1.5,\n    \"earth_bus_bar_exists\": \"Yes\",\n    \"earth_cable_length\": 10.0\n  },\n  {\n    \"radio_unit_index\": 2,\n    \"radio_unit_number\": 2,\n    \"new_radio_unit_sector\": \"2\",\n    \"connected_to_antenna\": \"Existing\",\n    \"connected_antenna_technology\": [\"3G\", \"4G\"],\n    \"new_radio_unit_model\": \"Nokia AEHD\",\n    \"radio_unit_location\": \"Tower leg B\",\n    \"feeder_length_to_antenna\": 12.0,\n    \"tower_leg_section\": \"Tubular\",\n    \"tubular_cross_section\": 75.0,\n    \"side_arm_type\": \"Use existing empty side arm\",\n    \"side_arm_length\": 2.0,\n    \"side_arm_cross_section\": 40.0,\n    \"side_arm_offset\": 20.0,\n    \"dc_power_source\": \"New FPFH\",\n    \"dc_power_cable_length\": 15.0,\n    \"fiber_cable_length\": 25.0,\n    \"jumper_length\": 1.2,\n    \"earth_bus_bar_exists\": \"No\",\n    \"earth_cable_length\": 8.0\n  },\n  {\n    \"radio_unit_index\": 3,\n    \"radio_unit_number\": 3,\n    \"new_radio_unit_sector\": \"3\",\n    \"connected_to_antenna\": \"New\",\n    \"connected_antenna_technology\": [\"2G\", \"3G\", \"4G\", \"5G\"],\n    \"new_radio_unit_model\": \"Nokia AEHE\",\n    \"radio_unit_location\": \"Tower leg C\",\n    \"feeder_length_to_antenna\": 18.0,\n    \"tower_leg_section\": \"Angular\",\n    \"angular_l1_dimension\": 120.0,\n    \"angular_l2_dimension\": 120.0,\n    \"side_arm_type\": \"Use existing antenna side arm\",\n    \"side_arm_length\": 3.0,\n    \"side_arm_cross_section\": 60.0,\n    \"side_arm_offset\": 30.0,\n    \"dc_power_source\": \"Existing FPFH\",\n    \"dc_power_cable_length\": 25.0,\n    \"fiber_cable_length\": 35.0,\n    \"jumper_length\": 1.8,\n    \"earth_bus_bar_exists\": \"Yes\",\n    \"earth_cable_length\": 12.0\n  }\n]"
						},
						"url": {
							"raw": "{{base_url}}/api/new-radio-units/{{session_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"new-radio-units",
								"{{session_id}}"
							]
						}
					}
				},
				{
					"name": "4. Get All Radio Units (After Create)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has radio units data\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.has_data).to.be.true;",
									"    pm.expect(jsonData.data.length).to.be.greaterThan(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/new-radio-units/{{session_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"new-radio-units",
								"{{session_id}}"
							]
						}
					}
				},
				{
					"name": "5. Update Single Radio Unit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Updated successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.new_radio_unit_model).to.include('Updated');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"new_radio_unit_model\": \"Nokia AEHC Updated\",\n  \"feeder_length_to_antenna\": 20.0,\n  \"side_arm_length\": 3.5,\n  \"dc_power_cable_length\": 22.0\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/new-radio-units/{{session_id}}/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"new-radio-units",
								"{{session_id}}",
								"1"
							]
						}
					}
				},
				{
					"name": "6. Update Multiple Radio Units",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Multiple units updated\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.units_updated).to.be.greaterThan(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"radio_unit_index\": 2,\n    \"new_radio_unit_model\": \"Nokia AEHD Updated v2\",\n    \"dc_power_cable_length\": 18.0\n  },\n  {\n    \"radio_unit_index\": 3,\n    \"new_radio_unit_model\": \"Nokia AEHE Updated v2\",\n    \"fiber_cable_length\": 40.0\n  }\n]"
						},
						"url": {
							"raw": "{{base_url}}/api/new-radio-units/{{session_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"new-radio-units",
								"{{session_id}}"
							]
						}
					}
				},
				{
					"name": "7. Delete Single Radio Unit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Deletion confirmed\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include('deleted successfully');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/new-radio-units/{{session_id}}/3",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"new-radio-units",
								"{{session_id}}",
								"3"
							]
						}
					}
				},
				{
					"name": "8. Test Validation Errors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Validation error returned\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error).to.include('Validation error');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"radio_unit_index\": 1,\n    \"new_radio_unit_sector\": \"INVALID_SECTOR\",\n    \"connected_to_antenna\": \"INVALID_CONNECTION\",\n    \"feeder_length_to_antenna\": -5,\n    \"radio_unit_location\": \"Invalid Location\"\n  }\n]"
						},
						"url": {
							"raw": "{{base_url}}/api/new-radio-units/{{session_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"new-radio-units",
								"{{session_id}}"
							]
						}
					}
				},
				{
					"name": "9. Delete All Radio Units",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/new-radio-units/{{session_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"new-radio-units",
								"{{session_id}}"
							]
						}
					}
				}
			]
		},
		{
			"name": "ðŸ”Œ FPFH API",
			"item": [
				{
					"name": "1. Get All FPFHs (Empty)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has fpfhs array\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('fpfhs');",
									"    pm.expect(jsonData.fpfhs).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/new-fpfh/{{session_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"new-fpfh",
								"{{session_id}}"
							]
						}
					}
				},
				{
					"name": "2. Get Specific FPFH (Empty)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has fpfh_index\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('fpfh_index');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/new-fpfh/{{session_id}}/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"new-fpfh",
								"{{session_id}}",
								"1"
							]
						}
					}
				},
				{
					"name": "3. Create FPFH 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"pm.test(\"FPFH created successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fpfh_index\": 1,\n  \"fpfh_number\": 1,\n  \"fpfh_installation_type\": \"Standalone\",\n  \"fpfh_location\": \"On ground\",\n  \"fpfh_base_height\": 1.5,\n  \"fpfh_tower_leg\": \"A\",\n  \"fpfh_dc_power_source\": \"from new DC rectifier cabinet\",\n  \"dc_distribution_source\": \"BLVD\",\n  \"ethernet_cable_length\": 50.0,\n  \"dc_power_cable_length\": 30.0,\n  \"earth_bus_bar_exists\": \"Yes\",\n  \"earth_cable_length\": 15.0\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/new-fpfh/{{session_id}}/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"new-fpfh",
								"{{session_id}}",
								"1"
							]
						}
					}
				},
				{
					"name": "4. Create FPFH 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"pm.test(\"FPFH created successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fpfh_index\": 2,\n  \"fpfh_number\": 2,\n  \"fpfh_installation_type\": \"Stacked with other Nokia modules\",\n  \"fpfh_location\": \"On tower\",\n  \"fpfh_base_height\": 12.0,\n  \"fpfh_tower_leg\": \"B\",\n  \"fpfh_dc_power_source\": \"from the existing rectifier cabinet\",\n  \"dc_distribution_source\": \"LLVD\",\n  \"ethernet_cable_length\": 25.0,\n  \"dc_power_cable_length\": 20.0,\n  \"earth_bus_bar_exists\": \"No\",\n  \"earth_cable_length\": 10.0\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/new-fpfh/{{session_id}}/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"new-fpfh",
								"{{session_id}}",
								"2"
							]
						}
					}
				},
				{
					"name": "5. Get All FPFHs (After Create)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has FPFHs data\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.total_fpfhs).to.be.greaterThan(0);",
									"    pm.expect(jsonData.fpfhs.length).to.be.greaterThan(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/new-fpfh/{{session_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"new-fpfh",
								"{{session_id}}"
							]
						}
					}
				},
				{
					"name": "6. Update FPFH 1 (Partial)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"FPFH updated successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.fpfh_installation_type).to.equal('Other');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fpfh_installation_type\": \"Other\",\n  \"ethernet_cable_length\": 60.0,\n  \"dc_power_cable_length\": 35.0\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/new-fpfh/{{session_id}}/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"new-fpfh",
								"{{session_id}}",
								"1"
							]
						}
					}
				},
				{
					"name": "7. Delete FPFH 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Deletion confirmed\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include('deleted successfully');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/new-fpfh/{{session_id}}/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"new-fpfh",
								"{{session_id}}",
								"2"
							]
						}
					}
				},
				{
					"name": "8. Test FPFH Validation Errors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Validation error returned\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fpfh_index\": 1,\n  \"fpfh_installation_type\": \"INVALID_TYPE\",\n  \"fpfh_location\": \"Invalid Location\",\n  \"fpfh_base_height\": -5,\n  \"fpfh_tower_leg\": \"INVALID_LEG\",\n  \"ethernet_cable_length\": \"not_a_number\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/new-fpfh/{{session_id}}/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"new-fpfh",
								"{{session_id}}",
								"1"
							]
						}
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "session_id",
			"value": "test-session-123",
			"type": "string"
		}
	]
} 