name: Sync Fork with Upstream

on:
  schedule:
    - cron: '0 */4 * * *'  # Every 4 hours at the 0th minute
  workflow_dispatch:
  repository_dispatch:
    types: [upstream-update]

jobs:
  sync:
    runs-on: self-hosted  # Your Windows runner
    
    steps:
    - name: Clean workspace
      shell: powershell
      run: |
        Remove-Item -Recurse -Force -ErrorAction SilentlyContinue C:/actions-runner/_work/see_survey/see_survey
        Write-Host "Workspace cleaned"
    
    - name: Checkout
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0  # Fetch full history
        persist-credentials: true
    
    - name: Set up Git
      shell: powershell
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global --add safe.directory C:/actions-runner/_work/see_survey/see_survey
        Write-Host "Git configuration completed"
    
    - name: Add upstream and fetch
      shell: powershell
      run: |
        try {
          # Remove upstream if it exists
          git remote remove upstream 2>$null
        } catch {
          Write-Host "Upstream remote doesn't exist, continuing..."
        }
        
        git remote add upstream https://github.com/yasmen-ahmed/see_survey.git
        git remote -v
        
        Write-Host "Fetching upstream changes..."
        git fetch upstream
        git fetch origin
        
        Write-Host "Fetch completed successfully"
    
    - name: Compare commits
      id: compare
      shell: powershell
      run: |
        try {
          $upstream = git rev-parse upstream/main
          $origin = git rev-parse origin/main
          
          Write-Host "Upstream commit: $upstream"
          Write-Host "Origin commit: $origin"
          
          # Set outputs for GitHub Actions
          echo "upstream=$upstream" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          echo "origin=$origin" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          
          if ($upstream -ne $origin) {
            Write-Host "New commits found in upstream!"
            echo "has_changes=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          } else {
            Write-Host "No new commits found."
            echo "has_changes=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          }
        } catch {
          Write-Host "Error comparing commits: $_"
          echo "has_changes=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          exit 1
        }
    
    - name: Check for conflicts before merge
      if: steps.compare.outputs.has_changes == 'true'
      id: check-for-conflicts
      shell: powershell
      run: |
        Write-Host "Checking for potential merge conflicts..."
        git checkout main
        
        # Check if we can merge cleanly
        $mergeBase = git merge-base HEAD upstream/main
        $conflicts = git merge-tree $mergeBase HEAD upstream/main
        
        if ($conflicts -match "<<<<<<< ") {
          Write-Host "⚠️ Potential merge conflicts detected!"
          Write-Host "Conflicts found in the following areas:"
          Write-Host $conflicts
          echo "has_conflicts=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        } else {
          Write-Host "✅ No conflicts detected, safe to merge"
          echo "has_conflicts=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        }
    
    - name: Sync if different and no conflicts
      if: steps.compare.outputs.has_changes == 'true' && steps.check-for-conflicts.outputs.has_conflicts == 'false'
      shell: powershell
      run: |
        try {
          Write-Host "Starting sync process..."
          
          # Ensure we're on main branch
          git checkout main
          git status
          
          # Merge upstream changes
          Write-Host "Merging upstream/main..."
          git merge upstream/main --no-edit
          
          # Push changes
          Write-Host "Pushing changes to origin..."
          git push origin main
          
          Write-Host "✅ Sync completed successfully!"
          
          # Get commit count
          $commitCount = git rev-list --count origin/main..upstream/main
          Write-Host "Synced $commitCount new commits"
        } catch {
          Write-Host "❌ Error during sync: $_"
          exit 1
        }
    
    - name: Handle conflicts (Create PR)
      if: steps.compare.outputs.has_changes == 'true' && steps.check-for-conflicts.outputs.has_conflicts == 'true'
      shell: powershell
      run: |
        Write-Host "Creating branch for manual conflict resolution..."
        
        $branchName = "sync/upstream-conflicts-${{ github.run_number }}"
        git checkout -b $branchName
        
        # Attempt merge and allow conflicts
        try {
          git merge upstream/main --no-ff --no-commit
          git add .
          git commit -m "Sync attempt with conflicts - requires manual resolution"
        } catch {
          Write-Host "Merge conflicts detected, committing conflicted state"
          git add .
          git commit -m "Sync attempt with conflicts - requires manual resolution"
        }
        
        git push origin $branchName
        echo "conflict_branch=$branchName" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        
        Write-Host "Branch '$branchName' created with conflicts for manual resolution"
    
    - name: Create Pull Request for conflicts
      if: steps.compare.outputs.has_changes == 'true
